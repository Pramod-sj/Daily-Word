plugins {
    alias(libs.plugins.application) // Applies the Android application plugin
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.googleServices)      // Applies Google Services
    alias(libs.plugins.firebaseCrashlytics) // Applies Firebase Crashlytics
    alias(libs.plugins.hilt)                // Applies Dagger Hilt
    alias(libs.plugins.ksp)                 // Applies KSP
    alias(libs.plugins.org.jetbrains.kotlin.kapt)         // Applies Kotlin KAPT
}

def keyPropertiesFile = rootProject.file("key.properties")
def keyProperties = new Properties()
keyProperties.load(new FileInputStream(keyPropertiesFile))

def endPointPropertiesFile = rootProject.file("endpoint.properties")
def endpointProperties = new Properties()
endpointProperties.load(new FileInputStream(endPointPropertiesFile))

android {

    compileSdk 34

    defaultConfig {
        applicationId "com.pramod.dailyword"
        minSdk 21
        targetSdk 34
        versionCode 202410071
        versionName "2.4.3"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "GOOGLE_LICENSE_KEY", keyProperties['GOOGLE_LICENSE_KEY'])
        buildConfigField("String", "MERCHANT_ID", keyProperties['MERCHANT_ID'])
        buildConfigField("String", "GOOGLE_IN_APP_RSA_KEY", keyProperties['GOOGLE_IN_APP_RSA_KEY'])

        /**
         * Base urls and Endpoints
         */
        buildConfigField("String", "BASE_URL", endpointProperties['BASE_URL'])
        buildConfigField("String", "API_BASE_URL", endpointProperties['API_BASE_URL'])
        buildConfigField("String", "WORLD_TIME_BASE_URL", endpointProperties['WORLD_TIME_BASE_URL'])
        buildConfigField("String", "GET_WORD_OF_THE_DAY", endpointProperties['GET_WORD_OF_THE_DAY'])
        buildConfigField("String", "GET_WORDS", endpointProperties['GET_WORDS'])
        buildConfigField("String", "GET_WORDS_PAGING", endpointProperties['GET_WORDS_PAGING'])

        buildConfigField("String", "GET_RANDOM_WORD", endpointProperties['GET_RANDOM_WORD'])
        buildConfigField("String", "PRIVACY_POLICY", endpointProperties['PRIVACY_POLICY'])
        buildConfigField("String", "TERM_AND_CONDITION", endpointProperties['TERM_AND_CONDITION'])
        buildConfigField("String", "GET_PUBLIC_IP", endpointProperties['GET_PUBLIC_IP'])
        buildConfigField("String", "GET_IP_DETAILS", endpointProperties['GET_IP_DETAILS'])
        buildConfigField("String", "HOME_BACKGROUND_URL", endpointProperties['HOME_BACKGROUND_URL'])
        /**
         * End
         */
    }

    buildTypes {
        debug {
            manifestPlaceholders = [crashlyticsCollectionEnabled: "false"]
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [crashlyticsCollectionEnabled: "true"]
            ndk {
                debugSymbolLevel 'SYMBOL_TABLE'
            }
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    buildFeatures {
        dataBinding = true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.9"
    }

    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }

    namespace 'com.pramod.dailyword'

}

kapt {
    correctErrorTypes = true
}


dependencies {
    implementation(libs.kotlin.stdlib)
    implementation(libs.kotlin.stdlib.jdk8)

    testImplementation(libs.junit)
    androidTestImplementation(libs.androidxTestJunit)
    androidTestImplementation(libs.espressoCore)

    implementation(libs.material)
    implementation(libs.swiperefreshlayout)
    implementation(libs.appcompat)
    implementation(libs.coreKtx)
    implementation(libs.constraintlayout)
    implementation(libs.recyclerview)

    implementation(libs.appUpdateKtx)
    implementation(libs.reviewKtx)

    implementation(libs.preferenceKtx)

    ksp(libs.databindingCompiler)

    implementation(libs.retrofit)
    implementation(libs.retrofitGson)
    implementation(libs.retrofitScalars)

    implementation(libs.roomRuntime)
    implementation(libs.roomKtx)
    implementation(libs.roomPaging)
    ksp(libs.roomCompiler)

    implementation(libs.viewmodelKtx)
    implementation(libs.livedataKtx)
    implementation(libs.lifecycleExtensions)

    implementation(libs.firebaseMessaging)
    implementation(libs.firebaseConfigKtx)
    implementation(libs.firebaseAnalyticsKtx)
    implementation(libs.firebaseCrashlyticsKtx)

    implementation(libs.pagingRuntimeKtx)

    implementation(libs.facebookAudienceNetworkSdk)
    implementation(libs.autostarter)

    implementation(libs.lottie)
    implementation(libs.lottieCompose)

    implementation(libs.browser)
    implementation(libs.webkit)

    implementation(libs.hiltAndroid)
    kapt(libs.hiltCompiler)
    implementation(libs.hiltNavigationFragment)
    implementation(libs.hiltWork)

    implementation(libs.glide)
    ksp(libs.glideCompiler)

    implementation(libs.billingKtx)

    implementation(libs.okhttpLoggingInterceptor)

    implementation(libs.timber)

    implementation(platform(libs.composeBom))
    androidTestImplementation(platform(libs.composeBom))
    implementation(libs.composeUi)
    implementation(libs.composeMaterial)
    implementation(libs.composeMaterial3)
    implementation(libs.composeUiToolingPreview)
    implementation(libs.activityCompose)
    debugImplementation(libs.composeUiTooling)

    implementation(libs.accompanistThemeAdapter)

    implementation(libs.workRuntimeKtx)

    // Debugging (LeakCanary)
    debugImplementation(libs.leakCanary)

    //custom lib to play and store audio files
    implementation project(path: ':audioplayer')

}
