plugins {
    alias(libs.plugins.application) // Applies the Android application plugin
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.googleServices)      // Applies Google Services
    alias(libs.plugins.firebaseCrashlytics) // Applies Firebase Crashlytics
    alias(libs.plugins.hilt)                // Applies Dagger Hilt
    alias(libs.plugins.ksp)                 // Applies KSP
    alias(libs.plugins.org.jetbrains.kotlin.kapt)         // Applies Kotlin KAPT
    alias(libs.plugins.compose.compiler)
}

def keyPropertiesFile = rootProject.file("key.properties")
def keyProperties = new Properties()
keyProperties.load(new FileInputStream(keyPropertiesFile))

def endPointPropertiesFile = rootProject.file("endpoint.properties")
def endpointProperties = new Properties()
endpointProperties.load(new FileInputStream(endPointPropertiesFile))

android {

    compileSdk 34

    defaultConfig {
        applicationId "com.pramod.dailyword"
        minSdk 21
        targetSdk 34
        versionCode 202410090
        versionName "3.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "GOOGLE_LICENSE_KEY", keyProperties['GOOGLE_LICENSE_KEY'])
        buildConfigField("String", "MERCHANT_ID", keyProperties['MERCHANT_ID'])
        buildConfigField("String", "GOOGLE_IN_APP_RSA_KEY", keyProperties['GOOGLE_IN_APP_RSA_KEY'])

        /**
         * Base urls and Endpoints
         */
        buildConfigField("String", "BASE_URL", endpointProperties['BASE_URL'])
        buildConfigField("String", "API_BASE_URL", endpointProperties['API_BASE_URL'])
        buildConfigField("String", "WORLD_TIME_BASE_URL", endpointProperties['WORLD_TIME_BASE_URL'])
        buildConfigField("String", "GET_WORD_OF_THE_DAY", endpointProperties['GET_WORD_OF_THE_DAY'])
        buildConfigField("String", "GET_WORDS", endpointProperties['GET_WORDS'])
        buildConfigField("String", "GET_WORDS_PAGING", endpointProperties['GET_WORDS_PAGING'])

        buildConfigField("String", "GET_RANDOM_WORD", endpointProperties['GET_RANDOM_WORD'])
        buildConfigField("String", "PRIVACY_POLICY", endpointProperties['PRIVACY_POLICY'])
        buildConfigField("String", "TERM_AND_CONDITION", endpointProperties['TERM_AND_CONDITION'])
        buildConfigField("String", "GET_PUBLIC_IP", endpointProperties['GET_PUBLIC_IP'])
        buildConfigField("String", "GET_IP_DETAILS", endpointProperties['GET_IP_DETAILS'])
        buildConfigField("String", "HOME_BACKGROUND_URL", endpointProperties['HOME_BACKGROUND_URL'])
        /**
         * End
         */
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled true
            shrinkResources true
            proguardFiles(getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro")
            manifestPlaceholders = [crashlyticsCollectionEnabled: "false"]
        }

        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles(getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro")
            manifestPlaceholders = [crashlyticsCollectionEnabled: "true"]
            ndk { debugSymbolLevel 'SYMBOL_TABLE' }
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    buildFeatures {
        dataBinding = true
        compose true
        buildConfig true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.9"
    }

    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }

    namespace 'com.pramod.dailyword'

}

kapt {
    correctErrorTypes = true
}


dependencies {
    // Kotlin standard libraries
    implementation(libs.kotlin.stdlib) // Kotlin standard library
    implementation(libs.kotlin.stdlib.jdk8) // Kotlin standard library with JDK 8 extensions

    // Testing libraries
    testImplementation(libs.junit) // Unit testing framework
    androidTestImplementation(libs.androidxTestJunit) // Android JUnit test support
    androidTestImplementation(libs.espressoCore) // Espresso UI testing framework

    // UI libraries
    implementation(libs.material) // Material Design components
    implementation(libs.swiperefreshlayout) // Swipe-to-refresh layout
    implementation(libs.appcompat) // AppCompat support library
    implementation(libs.coreKtx) // Kotlin extensions for Android core
    implementation(libs.constraintlayout) // Constraint layout for complex UIs
    implementation(libs.recyclerview) // RecyclerView for displaying lists

    // Google Play libraries
    implementation(libs.appUpdateKtx) // KTX extensions for app updates
    implementation(libs.reviewKtx) // KTX extensions for in-app reviews

    // Preferences library
    implementation(libs.preferenceKtx) // Kotlin extensions for shared preferences

    // Data Binding compiler
    ksp(libs.databindingCompiler) // Kotlin Symbol Processing for data binding

    // Retrofit libraries for network calls
    implementation(libs.retrofit) // Core Retrofit library
    implementation(libs.retrofitGson) // Gson converter for Retrofit
    implementation(libs.retrofitScalars) // Scalars converter for Retrofit

    // Room libraries for local database
    implementation(libs.roomRuntime) // Room runtime library
    implementation(libs.roomKtx) // Kotlin extensions for Room
    implementation(libs.roomPaging) // Paging support for Room
    ksp(libs.roomCompiler) // Kotlin Symbol Processing for Room

    // Android lifecycle libraries
    implementation(libs.viewmodelKtx) // ViewModel support with KTX
    implementation(libs.livedataKtx) // LiveData support with KTX
    implementation(libs.lifecycleExtensions) // Extensions for Android lifecycle

    // Firebase libraries
    implementation(libs.firebaseMessaging) // Firebase Cloud Messaging
    implementation(libs.firebaseConfigKtx) // Firebase Remote Config with KTX
    implementation(libs.firebaseAnalyticsKtx) // Firebase Analytics with KTX
    implementation(libs.firebaseCrashlyticsKtx) // Firebase Crashlytics with KTX

    // Paging library for efficient data loading
    implementation(libs.pagingRuntimeKtx) // Paging library with KTX

    // Facebook Audience Network SDK for monetization
    implementation(libs.facebookAudienceNetworkSdk) // Audience Network SDK

    // AutoStarter library for managing app permissions
    implementation(libs.autostarter) // Library for auto-start permissions

    // Lottie for animations
    implementation(libs.lottie) // Lottie for animations
    implementation(libs.lottieCompose) // Lottie for Jetpack Compose

    // In-app browser and webview
    implementation(libs.browser) // In-app browser
    implementation(libs.webkit) // WebView for displaying web content

    // Dagger Hilt for dependency injection
    implementation(libs.hiltAndroid) // Hilt for Android dependency injection
    kapt(libs.hiltCompiler) // Annotation processor for Hilt
    implementation(libs.hiltNavigationFragment) // Hilt navigation fragment support
    implementation(libs.hiltWork) // Hilt support for WorkManager

    // Image loading with Glide
    implementation(libs.glide) // Glide for image loading
    ksp(libs.glideCompiler) // Kotlin Symbol Processing for Glide

    // Billing client for in-app purchases
    implementation(libs.billingKtx) // KTX for Billing Library

    // Logging with OkHttp
    implementation(libs.okhttpLoggingInterceptor) // Logging interceptor for OkHttp

    // Logging with Timber
    implementation(libs.timber) // Timber for logging

    // Jetpack Compose libraries
    implementation(platform(libs.composeBom)) // Jetpack Compose BOM for versioning
    androidTestImplementation(platform(libs.composeBom)) // Compose BOM for UI tests
    implementation(libs.composeUi) // Jetpack Compose UI library
    implementation(libs.composeMaterial) // Jetpack Compose Material library
    implementation(libs.composeMaterial3) // Jetpack Compose Material3 library
    implementation(libs.composeUiToolingPreview) // UI tooling preview for Compose
    implementation(libs.activityCompose) // Activity support for Jetpack Compose
    debugImplementation(libs.composeUiTooling) // UI tooling for debugging Compose

    // Accompanist library for additional Compose utilities
    implementation(libs.accompanistThemeAdapter) // Theme adapter for Compose

    // WorkManager for background tasks
    implementation(libs.workRuntimeKtx) // WorkManager with KTX

    // Debugging library (LeakCanary)
    debugImplementation(libs.leakCanary) // LeakCanary for detecting memory leaks

    // Custom library for playing and storing audio files
    implementation(project(path: ":audioplayer")) // Custom audio player library
}
